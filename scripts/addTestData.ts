import { Addressable } from "ethers";
import { ethers } from "hardhat";

async function main() {
  const [deployer, founder, cofounder, investor, richUser, user, poorUser] = await ethers.getSigners();
  console.log("–í–∏–∫–æ–Ω—É—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –¥–µ–ø–ª–æ–π –≤—ñ–¥ —ñ–º–µ–Ω—ñ:", deployer.address);

  const unityFlowAddress = "0x0165878A594ca255338adfa4d48449f69242Eb8F"; 
  const tokenAddress = "0x5FbDB2315678afecb367f032d93F642f64180aa3"; 
  const companyManagerAddrs = "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9"; 

  const UnityFlow = await ethers.getContractAt("UnityFlow", unityFlowAddress);
  const CompanyManager = await ethers.getContractAt("CompanyManager", companyManagerAddrs);
  const TokenUF = await ethers.getContractAt("TokenUF", tokenAddress);

  console.log("üîπ –†–æ–∑–¥–∞—á–∞ —Ç–æ–∫–µ–Ω—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º...");
   // üî∏ 1Ô∏è‚É£ –†–æ–∑–¥–∞—î–º–æ —Ç–æ–∫–µ–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
   const amount = ethers.parseUnits("5000", 18);
   const amountForRich = ethers.parseUnits("30000", 18);
 
   interface IRecipients {
     address: string,
     amount: bigint,
   }
 
   const recipients: IRecipients[] = [
     { address: founder.address, amount },
     { address: cofounder.address, amount },
     { address: investor.address, amount },
     { address: user.address, amount },
     { address: richUser.address, amount: amountForRich },
     { address: poorUser.address, amount: ethers.parseUnits("1", 18) }
   ];
 
   for (const recipient of recipients) {
     const tx = await TokenUF.connect(deployer).transfer(recipient.address, recipient.amount);
     await tx.wait();
     console.log(`‚úÖ ${recipient.amount} —Ç–æ–∫–µ–Ω—ñ–≤ –ø–µ—Ä–µ–¥–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${recipient.address}`);
   }

  const companyNames = ["Web3Tech", "GreenFuture", "AIStartup"];
  let companyContracts: any[] = [];

  console.log("üîπ –ü–æ—á–∏–Ω–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º–ø–∞–Ω—ñ–π...");


  const category = ["Tech","Web3","FinTech","Security","Marketing","Gaming","SaaS","E-commerce"];

  // üî∏ 12Ô∏è‚É£ –†–µ—î—Å—Ç—Ä—É—î–º–æ –∫–æ–º–ø–∞–Ω—ñ—ó
  companyContracts = await Promise.all(
    companyNames.map(async (name, index) => {
      console.log(`–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ–º–ø–∞–Ω—ñ—ó: ${name}...`);
      const image = "https://picsum.photos/200";
      const description = `A decentralized company ${name}`;
      const cofounders: Addressable[] = [];
  
      // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ–º–ø–∞–Ω—ñ—ó
      const tx = await UnityFlow.connect(founder).registerCompany(
        name, image, description, category[getRandomInt(0, category.length)], cofounders
      );
      console.log("–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞:", tx.hash);
      
      const receipt = await tx.wait();
      if (!receipt) {
        throw new Error(`‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –¥–ª—è ${name}`);
      }
      console.log("–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ —É –±–ª–æ—Ü—ñ:", receipt.blockNumber);
    

      // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–¥—ñ—ó
      const filter = CompanyManager.filters.CompanyRegistered();
      const events = await CompanyManager.queryFilter(filter, receipt.blockNumber, receipt.blockNumber);

      // console.log(events)

      const event = events.find((e) => e.blockNumber === receipt.blockNumber);
      if (!event) {
        throw new Error(`‚ùå –ü–æ–¥—ñ—é CompanyRegistered –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è ${name}`);
      }
  
      // console.log("–ê—Ä–≥—É–º–µ–Ω—Ç–∏ –ø–æ–¥—ñ—ó:", events[0].args);
        
      const companyAddress = events[0].args[1];
      const companyContract = await ethers.getContractAt("Company", companyAddress);
  
      console.log(`‚úÖ ${name} –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –∑–∞ –∞–¥—Ä–µ—Å–æ—é: ${companyAddress}`);
      return companyContract;
    })
  );

  
  console.log("üîπ –ü–æ—á–∏–Ω–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–æ–Ω–¥—ñ–≤ –¥–ª—è –∫–æ–º–ø–∞–Ω—ñ–π...");

  // üî∏ 3Ô∏è‚É£ –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ 2 —Ñ–æ–Ω–¥–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–æ–º–ø–∞–Ω—ñ—ó –≤—ñ–¥ —ñ–º–µ–Ω—ñ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫–∞
  await Promise.all(
    companyContracts.map(async (company) => {
      console.log(`üìå –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–æ–Ω–¥–∏ –¥–ª—è –∫–æ–º–ø–∞–Ω—ñ—ó: ${await company.name()}...`);
  
      await Promise.all(
        [1, 2].map(async (i) => {
          const goalUSD = (1000 * i).toString();
          const deadline = Math.floor(Date.now() / 1000) + 30 * 24 * 60 * 60;
  
          const tx = await company.connect(founder).createFundraising(
            `–§–æ–Ω–¥ #${i} –¥–ª—è ${await company.name()}`,
            "–û–ø–∏—Å —Ñ–æ–Ω–¥—É",
            "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è",
            goalUSD,
            deadline,
            "image_url"
          );
          await tx.wait();
  
          console.log(`‚úÖ –§–æ–Ω–¥ #${i} —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è –∫–æ–º–ø–∞–Ω—ñ—ó ${await company.name()}!`);
        })
      );
    })
  );
}

main().catch((error) => {
  console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –¥–µ–ø–ª–æ—é —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö:", error);
  process.exitCode = 1;
});

function getRandomInt(min: number, max: number) {
  min = Math.ceil(min);  // –û–∫—Ä—É–≥–ª—é—î–º–æ –≤–≥–æ—Ä—É, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—Ä–æ–±–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å
  max = Math.floor(max); // –û–∫—Ä—É–≥–ª—é—î–º–æ –≤–Ω–∏–∑, —â–æ–± –∑–∞–ª–∏—à–∏—Ç–∏—Å—è –≤ –º–µ–∂–∞—Ö –¥—ñ–∞–ø–∞–∑–æ–Ω—É
  return Math.floor(Math.random() * (max - min + 1)) + min;
}