import { ethers } from "hardhat";

async function main() {
  const [deployer, founder, cofounder, investor, richUser, user, poorUser] = await ethers.getSigners();
  console.log("–í–∏–∫–æ–Ω—É—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –¥–µ–ø–ª–æ–π –≤—ñ–¥ —ñ–º–µ–Ω—ñ:", deployer.address);

  const unityFlowAddress = "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707"; 
  const tokenAddress = "0x5FbDB2315678afecb367f032d93F642f64180aa3"; 

  const UnityFlow = await ethers.getContractAt("UnityFlow", unityFlowAddress);
  const TokenUF = await ethers.getContractAt("TokenUF", tokenAddress);

  console.log("üîπ –†–æ–∑–¥–∞—á–∞ —Ç–æ–∫–µ–Ω—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º...");
   // üî∏ 1Ô∏è‚É£ –†–æ–∑–¥–∞—î–º–æ —Ç–æ–∫–µ–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
   const amount = ethers.parseUnits("5000", 18);
   const amountForRich = ethers.parseUnits("30000", 18);
 
   interface IRecipients {
     address: string,
     amount: bigint,
   }
 
   const recipients: IRecipients[] = [
     { address: founder.address, amount },
     { address: cofounder.address, amount },
     { address: investor.address, amount },
     { address: user.address, amount },
     { address: richUser.address, amount: amountForRich },
     { address: poorUser.address, amount: ethers.parseUnits("1", 18) }
   ];
 
   for (const recipient of recipients) {
     const tx = await TokenUF.connect(deployer).transfer(recipient.address, recipient.amount);
     await tx.wait();
     console.log(`‚úÖ ${recipient.amount} —Ç–æ–∫–µ–Ω—ñ–≤ –ø–µ—Ä–µ–¥–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${recipient.address}`);
   }

  const companyNames = ["Web3Tech", "GreenFuture", "AIStartup"];
  let companyContracts: any[] = [];

  console.log("üîπ –ü–æ—á–∏–Ω–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º–ø–∞–Ω—ñ–π...");

  // üî∏ 12Ô∏è‚É£ –†–µ—î—Å—Ç—Ä—É—î–º–æ –∫–æ–º–ø–∞–Ω—ñ—ó
  for (const name of companyNames) {
    console.log(`–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ–º–ø–∞–Ω—ñ—ó: ${name}...`);
    const tx = await UnityFlow.connect(founder).registerCompany(name);
    await tx.wait();

    const companyIndex = await UnityFlow.companyCount();
    const companyAddress = await UnityFlow.companies(companyIndex);
    const companyContract = await ethers.getContractAt("Company", companyAddress);

    companyContracts.push(companyContract);
    console.log(`‚úÖ ${name} –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –∑–∞ –∞–¥—Ä–µ—Å–æ—é: ${companyAddress}`);
  }

  console.log("üîπ –ü–æ—á–∏–Ω–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–æ–Ω–¥—ñ–≤ –¥–ª—è –∫–æ–º–ø–∞–Ω—ñ–π...");

  // üî∏ 3Ô∏è‚É£ –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ 2 —Ñ–æ–Ω–¥–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–æ–º–ø–∞–Ω—ñ—ó –≤—ñ–¥ —ñ–º–µ–Ω—ñ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫–∞
  for (const company of companyContracts) {
    console.log(`üìå –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–æ–Ω–¥–∏ –¥–ª—è –∫–æ–º–ø–∞–Ω—ñ—ó: ${await company.name()}...`);

    for (let i = 1; i <= 2; i++) {
      const goalUSD = (1000 * i).toString(); // –¶—ñ–ª—å–æ–≤–∞ —Å—É–º–∞ (1000$ —ñ 2000$)
      const deadline = Math.floor(Date.now() / 1000) + 30 * 24 * 60 * 60; // –î–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑ 30 –¥–Ω—ñ–≤

      const tx = await company.connect(founder).createFundraising(
        `–§–æ–Ω–¥ #${i} –¥–ª—è ${await company.name()}`,
        "–û–ø–∏—Å —Ñ–æ–Ω–¥—É",
        "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è",
        goalUSD,
        deadline,
        "image_url"
      );
      await tx.wait();

      console.log(`‚úÖ –§–æ–Ω–¥ #${i} —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è –∫–æ–º–ø–∞–Ω—ñ—ó ${await company.name()}!`);
    }
  }

  console.log("üéâ –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω—ñ!");
}

main().catch((error) => {
  console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –¥–µ–ø–ª–æ—é —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö:", error);
  process.exitCode = 1;
});
