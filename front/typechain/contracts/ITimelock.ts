/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ITimelockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "executeTimelockedProposal"
      | "getUnlockTime"
      | "isVotingOpen"
      | "queueProposal"
      | "setTimelock"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "FundsReleased" | "TimelockActivated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "executeTimelockedProposal",
    values: [BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnlockTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isVotingOpen",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "queueProposal",
    values: [
      BytesLike,
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimelock",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "executeTimelockedProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVotingOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queueProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimelock",
    data: BytesLike
  ): Result;
}

export namespace FundsReleasedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    recipient: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    recipient: string,
    amount: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TimelockActivatedEvent {
  export type InputTuple = [proposalId: BigNumberish, unlockTime: BigNumberish];
  export type OutputTuple = [proposalId: bigint, unlockTime: bigint];
  export interface OutputObject {
    proposalId: bigint;
    unlockTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ITimelock extends BaseContract {
  connect(runner?: ContractRunner | null): ITimelock;
  waitForDeployment(): Promise<this>;

  interface: ITimelockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  executeTimelockedProposal: TypedContractMethod<
    [
      proposalId: BigNumberish,
      treasury: AddressLike,
      recipient: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getUnlockTime: TypedContractMethod<
    [proposalId: BigNumberish],
    [bigint],
    "view"
  >;

  isVotingOpen: TypedContractMethod<[proposalId: BytesLike], [boolean], "view">;

  queueProposal: TypedContractMethod<
    [
      proposalId: BytesLike,
      target: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      delay: BigNumberish,
      duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setTimelock: TypedContractMethod<
    [proposalId: BigNumberish, duration: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "executeTimelockedProposal"
  ): TypedContractMethod<
    [
      proposalId: BigNumberish,
      treasury: AddressLike,
      recipient: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getUnlockTime"
  ): TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "isVotingOpen"
  ): TypedContractMethod<[proposalId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "queueProposal"
  ): TypedContractMethod<
    [
      proposalId: BytesLike,
      target: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      delay: BigNumberish,
      duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTimelock"
  ): TypedContractMethod<
    [proposalId: BigNumberish, duration: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "FundsReleased"
  ): TypedContractEvent<
    FundsReleasedEvent.InputTuple,
    FundsReleasedEvent.OutputTuple,
    FundsReleasedEvent.OutputObject
  >;
  getEvent(
    key: "TimelockActivated"
  ): TypedContractEvent<
    TimelockActivatedEvent.InputTuple,
    TimelockActivatedEvent.OutputTuple,
    TimelockActivatedEvent.OutputObject
  >;

  filters: {
    "FundsReleased(uint256,address,uint256)": TypedContractEvent<
      FundsReleasedEvent.InputTuple,
      FundsReleasedEvent.OutputTuple,
      FundsReleasedEvent.OutputObject
    >;
    FundsReleased: TypedContractEvent<
      FundsReleasedEvent.InputTuple,
      FundsReleasedEvent.OutputTuple,
      FundsReleasedEvent.OutputObject
    >;

    "TimelockActivated(uint256,uint256)": TypedContractEvent<
      TimelockActivatedEvent.InputTuple,
      TimelockActivatedEvent.OutputTuple,
      TimelockActivatedEvent.OutputObject
    >;
    TimelockActivated: TypedContractEvent<
      TimelockActivatedEvent.InputTuple,
      TimelockActivatedEvent.OutputTuple,
      TimelockActivatedEvent.OutputObject
    >;
  };
}
