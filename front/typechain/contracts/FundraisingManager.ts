/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface FundraisingManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createFundraising"
      | "decreaseInvestments"
      | "donationsByCurrency"
      | "ethPriceFeed"
      | "fundraiserCount"
      | "fundraisers"
      | "getFundraisers"
      | "getTotalDonations"
      | "getTotalInvestments"
      | "increaseInvestments"
      | "investmentsByCurrency"
      | "isActiveFundraiser"
      | "token"
      | "tokenPriceFeed"
      | "updateDonations"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createFundraising",
    values: [
      AddressLike,
      BigNumberish,
      AddressLike,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseInvestments",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "donationsByCurrency",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ethPriceFeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundraiserCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundraisers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFundraisers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDonations",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalInvestments",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseInvestments",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "investmentsByCurrency",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isActiveFundraiser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenPriceFeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateDonations",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "createFundraising",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseInvestments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donationsByCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundraiserCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundraisers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundraisers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDonations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalInvestments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseInvestments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investmentsByCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActiveFundraiser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDonations",
    data: BytesLike
  ): Result;
}

export interface FundraisingManager extends BaseContract {
  connect(runner?: ContractRunner | null): FundraisingManager;
  waitForDeployment(): Promise<this>;

  interface: FundraisingManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createFundraising: TypedContractMethod<
    [
      unityFlowAddress: AddressLike,
      id: BigNumberish,
      company: AddressLike,
      title: string,
      description: string,
      category: string,
      goalUSD: BigNumberish,
      deadline: BigNumberish,
      image: string,
      platformFeePercent: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  decreaseInvestments: TypedContractMethod<
    [amount: BigNumberish, currency: string],
    [void],
    "nonpayable"
  >;

  donationsByCurrency: TypedContractMethod<[arg0: string], [bigint], "view">;

  ethPriceFeed: TypedContractMethod<[], [string], "view">;

  fundraiserCount: TypedContractMethod<[], [bigint], "view">;

  fundraisers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getFundraisers: TypedContractMethod<[], [string[]], "view">;

  getTotalDonations: TypedContractMethod<[currency: string], [bigint], "view">;

  getTotalInvestments: TypedContractMethod<
    [currency: string],
    [bigint],
    "view"
  >;

  increaseInvestments: TypedContractMethod<
    [amount: BigNumberish, currency: string],
    [void],
    "nonpayable"
  >;

  investmentsByCurrency: TypedContractMethod<[arg0: string], [bigint], "view">;

  isActiveFundraiser: TypedContractMethod<
    [fundraiser: AddressLike],
    [boolean],
    "view"
  >;

  token: TypedContractMethod<[], [string], "view">;

  tokenPriceFeed: TypedContractMethod<[], [string], "view">;

  updateDonations: TypedContractMethod<
    [amount: BigNumberish, currency: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createFundraising"
  ): TypedContractMethod<
    [
      unityFlowAddress: AddressLike,
      id: BigNumberish,
      company: AddressLike,
      title: string,
      description: string,
      category: string,
      goalUSD: BigNumberish,
      deadline: BigNumberish,
      image: string,
      platformFeePercent: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decreaseInvestments"
  ): TypedContractMethod<
    [amount: BigNumberish, currency: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "donationsByCurrency"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "ethPriceFeed"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fundraiserCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fundraisers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getFundraisers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTotalDonations"
  ): TypedContractMethod<[currency: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalInvestments"
  ): TypedContractMethod<[currency: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "increaseInvestments"
  ): TypedContractMethod<
    [amount: BigNumberish, currency: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "investmentsByCurrency"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "isActiveFundraiser"
  ): TypedContractMethod<[fundraiser: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenPriceFeed"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateDonations"
  ): TypedContractMethod<
    [amount: BigNumberish, currency: string],
    [void],
    "nonpayable"
  >;

  filters: {};
}
