/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type FundraisingParamsStruct = {
  id: BigNumberish;
  company: AddressLike;
  title: string;
  description: string;
  image: string;
  category: string;
  goalUSD: BigNumberish;
  deadline: BigNumberish;
  token: AddressLike;
  platformFeePercent: BigNumberish;
};

export type FundraisingParamsStructOutput = [
  id: bigint,
  company: string,
  title: string,
  description: string,
  image: string,
  category: string,
  goalUSD: bigint,
  deadline: bigint,
  token: string,
  platformFeePercent: bigint
] & {
  id: bigint;
  company: string;
  title: string;
  description: string;
  image: string;
  category: string;
  goalUSD: bigint;
  deadline: bigint;
  token: string;
  platformFeePercent: bigint;
};

export interface FundraisingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkGoalReached"
      | "company"
      | "donateETH"
      | "donateUF"
      | "ethDonators"
      | "getDetails"
      | "getDonationETH"
      | "getDonationUF"
      | "getLatestETHPrice"
      | "getLatestTokenPrice"
      | "owner"
      | "platformFeePercent"
      | "refundETH"
      | "refundUF"
      | "renounceOwnership"
      | "token"
      | "transferOwnership"
      | "ufDonators"
      | "unityFlow"
      | "withdrawFunds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DonationReceived"
      | "OwnershipTransferred"
      | "RefundProcessed"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "checkGoalReached",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "company", values?: undefined): string;
  encodeFunctionData(functionFragment: "donateETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "donateUF",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ethDonators",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDonationETH",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDonationUF",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestETHPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestTokenPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "refundETH", values?: undefined): string;
  encodeFunctionData(functionFragment: "refundUF", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ufDonators",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unityFlow", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "checkGoalReached",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "company", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "donateETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "donateUF", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ethDonators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDetails", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDonationETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDonationUF",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestETHPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refundETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refundUF", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ufDonators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unityFlow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
}

export namespace DonationReceivedEvent {
  export type InputTuple = [
    donator: AddressLike,
    amount: BigNumberish,
    currency: string
  ];
  export type OutputTuple = [donator: string, amount: bigint, currency: string];
  export interface OutputObject {
    donator: string;
    amount: bigint;
    currency: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundProcessedEvent {
  export type InputTuple = [
    donator: AddressLike,
    amount: BigNumberish,
    currency: string
  ];
  export type OutputTuple = [donator: string, amount: bigint, currency: string];
  export interface OutputObject {
    donator: string;
    amount: bigint;
    currency: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [
    sender: AddressLike,
    amounts: [BigNumberish, BigNumberish],
    currencies: [string, string]
  ];
  export type OutputTuple = [
    sender: string,
    amounts: [bigint, bigint],
    currencies: [string, string]
  ];
  export interface OutputObject {
    sender: string;
    amounts: [bigint, bigint];
    currencies: [string, string];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Fundraising extends BaseContract {
  connect(runner?: ContractRunner | null): Fundraising;
  waitForDeployment(): Promise<this>;

  interface: FundraisingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkGoalReached: TypedContractMethod<[], [boolean], "view">;

  company: TypedContractMethod<[], [string], "view">;

  donateETH: TypedContractMethod<[], [void], "payable">;

  donateUF: TypedContractMethod<
    [
      _amount: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "payable"
  >;

  ethDonators: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getDetails: TypedContractMethod<
    [],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ]
    ],
    "view"
  >;

  getDonationETH: TypedContractMethod<[donator: AddressLike], [bigint], "view">;

  getDonationUF: TypedContractMethod<[donator: AddressLike], [bigint], "view">;

  getLatestETHPrice: TypedContractMethod<[], [bigint], "view">;

  getLatestTokenPrice: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  platformFeePercent: TypedContractMethod<[], [bigint], "view">;

  refundETH: TypedContractMethod<[], [void], "nonpayable">;

  refundUF: TypedContractMethod<[], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  token: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  ufDonators: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  unityFlow: TypedContractMethod<[], [string], "view">;

  withdrawFunds: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkGoalReached"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "company"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "donateETH"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "donateUF"
  ): TypedContractMethod<
    [
      _amount: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "ethDonators"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDetails"
  ): TypedContractMethod<
    [],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ]
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDonationETH"
  ): TypedContractMethod<[donator: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDonationUF"
  ): TypedContractMethod<[donator: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLatestETHPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLatestTokenPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "platformFeePercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "refundETH"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "refundUF"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ufDonators"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "unityFlow"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "DonationReceived"
  ): TypedContractEvent<
    DonationReceivedEvent.InputTuple,
    DonationReceivedEvent.OutputTuple,
    DonationReceivedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RefundProcessed"
  ): TypedContractEvent<
    RefundProcessedEvent.InputTuple,
    RefundProcessedEvent.OutputTuple,
    RefundProcessedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "DonationReceived(address,uint256,string)": TypedContractEvent<
      DonationReceivedEvent.InputTuple,
      DonationReceivedEvent.OutputTuple,
      DonationReceivedEvent.OutputObject
    >;
    DonationReceived: TypedContractEvent<
      DonationReceivedEvent.InputTuple,
      DonationReceivedEvent.OutputTuple,
      DonationReceivedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RefundProcessed(address,uint256,string)": TypedContractEvent<
      RefundProcessedEvent.InputTuple,
      RefundProcessedEvent.OutputTuple,
      RefundProcessedEvent.OutputObject
    >;
    RefundProcessed: TypedContractEvent<
      RefundProcessedEvent.InputTuple,
      RefundProcessedEvent.OutputTuple,
      RefundProcessedEvent.OutputObject
    >;

    "Withdrawn(address,uint256[2],string[2])": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
