/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TimelockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "executeProposal"
      | "governance"
      | "isVotingOpen"
      | "queueProposal"
      | "queuedProposals"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ProposalExecuted"
      | "ProposalQueued"
      | "ProposalRejected"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "executeProposal",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isVotingOpen",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "queueProposal",
    values: [
      BytesLike,
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "queuedProposals",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "executeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isVotingOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queueProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queuedProposals",
    data: BytesLike
  ): Result;
}

export namespace ProposalExecutedEvent {
  export type InputTuple = [proposalId: BytesLike];
  export type OutputTuple = [proposalId: string];
  export interface OutputObject {
    proposalId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalQueuedEvent {
  export type InputTuple = [
    proposalId: BytesLike,
    startTime: BigNumberish,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: string,
    startTime: bigint,
    endTime: bigint
  ];
  export interface OutputObject {
    proposalId: string;
    startTime: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalRejectedEvent {
  export type InputTuple = [proposalId: BytesLike];
  export type OutputTuple = [proposalId: string];
  export interface OutputObject {
    proposalId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Timelock extends BaseContract {
  connect(runner?: ContractRunner | null): Timelock;
  waitForDeployment(): Promise<this>;

  interface: TimelockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  executeProposal: TypedContractMethod<
    [proposalId: BytesLike],
    [void],
    "nonpayable"
  >;

  governance: TypedContractMethod<[], [string], "view">;

  isVotingOpen: TypedContractMethod<[proposalId: BytesLike], [boolean], "view">;

  queueProposal: TypedContractMethod<
    [
      proposalId: BytesLike,
      target: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      delay: BigNumberish,
      duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  queuedProposals: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, string, bigint, bigint, boolean, boolean] & {
        target: string;
        value: bigint;
        data: string;
        startTime: bigint;
        endTime: bigint;
        executed: boolean;
        rejected: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "executeProposal"
  ): TypedContractMethod<[proposalId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "governance"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isVotingOpen"
  ): TypedContractMethod<[proposalId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "queueProposal"
  ): TypedContractMethod<
    [
      proposalId: BytesLike,
      target: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      delay: BigNumberish,
      duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "queuedProposals"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, string, bigint, bigint, boolean, boolean] & {
        target: string;
        value: bigint;
        data: string;
        startTime: bigint;
        endTime: bigint;
        executed: boolean;
        rejected: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "ProposalExecuted"
  ): TypedContractEvent<
    ProposalExecutedEvent.InputTuple,
    ProposalExecutedEvent.OutputTuple,
    ProposalExecutedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalQueued"
  ): TypedContractEvent<
    ProposalQueuedEvent.InputTuple,
    ProposalQueuedEvent.OutputTuple,
    ProposalQueuedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalRejected"
  ): TypedContractEvent<
    ProposalRejectedEvent.InputTuple,
    ProposalRejectedEvent.OutputTuple,
    ProposalRejectedEvent.OutputObject
  >;

  filters: {
    "ProposalExecuted(bytes32)": TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;
    ProposalExecuted: TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;

    "ProposalQueued(bytes32,uint256,uint256)": TypedContractEvent<
      ProposalQueuedEvent.InputTuple,
      ProposalQueuedEvent.OutputTuple,
      ProposalQueuedEvent.OutputObject
    >;
    ProposalQueued: TypedContractEvent<
      ProposalQueuedEvent.InputTuple,
      ProposalQueuedEvent.OutputTuple,
      ProposalQueuedEvent.OutputObject
    >;

    "ProposalRejected(bytes32)": TypedContractEvent<
      ProposalRejectedEvent.InputTuple,
      ProposalRejectedEvent.OutputTuple,
      ProposalRejectedEvent.OutputObject
    >;
    ProposalRejected: TypedContractEvent<
      ProposalRejectedEvent.InputTuple,
      ProposalRejectedEvent.OutputTuple,
      ProposalRejectedEvent.OutputObject
    >;
  };
}
