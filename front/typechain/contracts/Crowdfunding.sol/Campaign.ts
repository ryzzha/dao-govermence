/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface CampaignInterface extends Interface {
  getFunction(
    nameOrSignature: "donate" | "getDetails" | "getDonation" | "parent"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "DonationReceived" | "Withdrawed"
  ): EventFragment;

  encodeFunctionData(functionFragment: "donate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDonation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "parent", values?: undefined): string;

  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDetails", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDonation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "parent", data: BytesLike): Result;
}

export namespace DonationReceivedEvent {
  export type InputTuple = [donator: AddressLike, amount: BigNumberish];
  export type OutputTuple = [donator: string, amount: bigint];
  export interface OutputObject {
    donator: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawedEvent {
  export type InputTuple = [
    sender: AddressLike,
    amount: BigNumberish,
    time: BigNumberish
  ];
  export type OutputTuple = [sender: string, amount: bigint, time: bigint];
  export interface OutputObject {
    sender: string;
    amount: bigint;
    time: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Campaign extends BaseContract {
  connect(runner?: ContractRunner | null): Campaign;
  waitForDeployment(): Promise<this>;

  interface: CampaignInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  donate: TypedContractMethod<[], [void], "payable">;

  getDetails: TypedContractMethod<
    [],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean
      ]
    ],
    "view"
  >;

  getDonation: TypedContractMethod<[donator: AddressLike], [bigint], "view">;

  parent: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "donate"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "getDetails"
  ): TypedContractMethod<
    [],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean
      ]
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDonation"
  ): TypedContractMethod<[donator: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "parent"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "DonationReceived"
  ): TypedContractEvent<
    DonationReceivedEvent.InputTuple,
    DonationReceivedEvent.OutputTuple,
    DonationReceivedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawed"
  ): TypedContractEvent<
    WithdrawedEvent.InputTuple,
    WithdrawedEvent.OutputTuple,
    WithdrawedEvent.OutputObject
  >;

  filters: {
    "DonationReceived(address,uint256)": TypedContractEvent<
      DonationReceivedEvent.InputTuple,
      DonationReceivedEvent.OutputTuple,
      DonationReceivedEvent.OutputObject
    >;
    DonationReceived: TypedContractEvent<
      DonationReceivedEvent.InputTuple,
      DonationReceivedEvent.OutputTuple,
      DonationReceivedEvent.OutputObject
    >;

    "Withdrawed(address,uint256,uint256)": TypedContractEvent<
      WithdrawedEvent.InputTuple,
      WithdrawedEvent.OutputTuple,
      WithdrawedEvent.OutputObject
    >;
    Withdrawed: TypedContractEvent<
      WithdrawedEvent.InputTuple,
      WithdrawedEvent.OutputTuple,
      WithdrawedEvent.OutputObject
    >;
  };
}
