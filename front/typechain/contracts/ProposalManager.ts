/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ProposalManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createProposal"
      | "executeProposal"
      | "existingProposals"
      | "getProposalHashes"
      | "getTotalVotes"
      | "lastProposalTime"
      | "proposalCooldown"
      | "proposalHashes"
      | "proposals"
      | "token"
      | "vote"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ProposalCreated" | "ProposalExecuted" | "VoteCast"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createProposal",
    values: [AddressLike, AddressLike, BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeProposal",
    values: [BytesLike, AddressLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "existingProposals",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalHashes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalVotes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastProposalTime",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCooldown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalHashes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BytesLike, AddressLike, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "existingProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastProposalTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [
    index: BigNumberish,
    proposalHash: BytesLike,
    creator: AddressLike,
    target: AddressLike,
    description: string,
    deadline: BigNumberish
  ];
  export type OutputTuple = [
    index: bigint,
    proposalHash: string,
    creator: string,
    target: string,
    description: string,
    deadline: bigint
  ];
  export interface OutputObject {
    index: bigint;
    proposalHash: string;
    creator: string;
    target: string;
    description: string;
    deadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalExecutedEvent {
  export type InputTuple = [
    proposalHash: BytesLike,
    target: AddressLike,
    description: string,
    success: boolean
  ];
  export type OutputTuple = [
    proposalHash: string,
    target: string,
    description: string,
    success: boolean
  ];
  export interface OutputObject {
    proposalHash: string;
    target: string;
    description: string;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    proposalHash: BytesLike,
    voter: AddressLike,
    support: boolean,
    votingPower: BigNumberish
  ];
  export type OutputTuple = [
    proposalHash: string,
    voter: string,
    support: boolean,
    votingPower: bigint
  ];
  export interface OutputObject {
    proposalHash: string;
    voter: string;
    support: boolean;
    votingPower: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ProposalManager extends BaseContract {
  connect(runner?: ContractRunner | null): ProposalManager;
  waitForDeployment(): Promise<this>;

  interface: ProposalManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createProposal: TypedContractMethod<
    [
      creator: AddressLike,
      target: AddressLike,
      data: BytesLike,
      description: string,
      deadline: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  executeProposal: TypedContractMethod<
    [
      proposalHash: BytesLike,
      target: AddressLike,
      description: string,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  existingProposals: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  getProposalHashes: TypedContractMethod<[], [string[]], "view">;

  getTotalVotes: TypedContractMethod<[], [bigint], "view">;

  lastProposalTime: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  proposalCooldown: TypedContractMethod<[], [bigint], "view">;

  proposalHashes: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  proposals: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, bigint, bigint, boolean] & {
        actionHash: string;
        description: string;
        votesFor: bigint;
        votesAgainst: bigint;
        deadline: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;

  token: TypedContractMethod<[], [string], "view">;

  vote: TypedContractMethod<
    [proposalHash: BytesLike, voter: AddressLike, support: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createProposal"
  ): TypedContractMethod<
    [
      creator: AddressLike,
      target: AddressLike,
      data: BytesLike,
      description: string,
      deadline: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeProposal"
  ): TypedContractMethod<
    [
      proposalHash: BytesLike,
      target: AddressLike,
      description: string,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "existingProposals"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getProposalHashes"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTotalVotes"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastProposalTime"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposalCooldown"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposalHashes"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, bigint, bigint, boolean] & {
        actionHash: string;
        description: string;
        votesFor: bigint;
        votesAgainst: bigint;
        deadline: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [proposalHash: BytesLike, voter: AddressLike, support: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalExecuted"
  ): TypedContractEvent<
    ProposalExecutedEvent.InputTuple,
    ProposalExecutedEvent.OutputTuple,
    ProposalExecutedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;

  filters: {
    "ProposalCreated(uint256,bytes32,address,address,string,uint256)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "ProposalExecuted(bytes32,address,string,bool)": TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;
    ProposalExecuted: TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;

    "VoteCast(bytes32,address,bool,uint256)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
  };
}
