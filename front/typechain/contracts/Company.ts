/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface CompanyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addCofounder"
      | "cofounders"
      | "createFundraising"
      | "founder"
      | "fullWithdraw"
      | "fundraisers"
      | "fundraisingCount"
      | "getCompanyFundraisers"
      | "invest"
      | "investorBalances"
      | "onFundraiserCompleted"
      | "owner"
      | "receiveFunds"
      | "renounceOwnership"
      | "token"
      | "totalFundsETH"
      | "totalFundsUF"
      | "totalInvestments"
      | "transferOwnership"
      | "unityFlow"
      | "widthdrawETH"
      | "widthdrawUF"
      | "withdrawInvestment"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CofounderAdded"
      | "FundraiserCompleted"
      | "FundraiserCreated"
      | "FundsReceived"
      | "FundsWithdrawn"
      | "InvestmentReceived"
      | "InvestmentWithdrawn"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addCofounder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cofounders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createFundraising",
    values: [string, string, string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "founder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fullWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundraisers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundraisingCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCompanyFundraisers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "invest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "investorBalances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onFundraiserCompleted",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receiveFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalFundsETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalFundsUF",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalInvestments",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unityFlow", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "widthdrawETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "widthdrawUF",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawInvestment",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addCofounder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cofounders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createFundraising",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "founder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fullWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundraisers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundraisingCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompanyFundraisers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "invest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "investorBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onFundraiserCompleted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalFundsETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFundsUF",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalInvestments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unityFlow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "widthdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "widthdrawUF",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawInvestment",
    data: BytesLike
  ): Result;
}

export namespace CofounderAddedEvent {
  export type InputTuple = [cofounder: AddressLike];
  export type OutputTuple = [cofounder: string];
  export interface OutputObject {
    cofounder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundraiserCompletedEvent {
  export type InputTuple = [
    fundraiserContract: AddressLike,
    totalCollectedETH: BigNumberish,
    totalCollectedUF: BigNumberish
  ];
  export type OutputTuple = [
    fundraiserContract: string,
    totalCollectedETH: bigint,
    totalCollectedUF: bigint
  ];
  export interface OutputObject {
    fundraiserContract: string;
    totalCollectedETH: bigint;
    totalCollectedUF: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundraiserCreatedEvent {
  export type InputTuple = [fundraiserContract: AddressLike];
  export type OutputTuple = [fundraiserContract: string];
  export interface OutputObject {
    fundraiserContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsReceivedEvent {
  export type InputTuple = [amount: BigNumberish, sender: AddressLike];
  export type OutputTuple = [amount: bigint, sender: string];
  export interface OutputObject {
    amount: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsWithdrawnEvent {
  export type InputTuple = [amount: BigNumberish, receiver: AddressLike];
  export type OutputTuple = [amount: bigint, receiver: string];
  export interface OutputObject {
    amount: bigint;
    receiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvestmentReceivedEvent {
  export type InputTuple = [investor: AddressLike, amount: BigNumberish];
  export type OutputTuple = [investor: string, amount: bigint];
  export interface OutputObject {
    investor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvestmentWithdrawnEvent {
  export type InputTuple = [investor: AddressLike, amount: BigNumberish];
  export type OutputTuple = [investor: string, amount: bigint];
  export interface OutputObject {
    investor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Company extends BaseContract {
  connect(runner?: ContractRunner | null): Company;
  waitForDeployment(): Promise<this>;

  interface: CompanyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addCofounder: TypedContractMethod<
    [cofounder: AddressLike],
    [void],
    "nonpayable"
  >;

  cofounders: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  createFundraising: TypedContractMethod<
    [
      title: string,
      description: string,
      category: string,
      goalUSD: BigNumberish,
      deadline: BigNumberish,
      image: string
    ],
    [void],
    "nonpayable"
  >;

  founder: TypedContractMethod<[], [string], "view">;

  fullWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  fundraisers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  fundraisingCount: TypedContractMethod<[], [bigint], "view">;

  getCompanyFundraisers: TypedContractMethod<[], [string[]], "view">;

  invest: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  investorBalances: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  onFundraiserCompleted: TypedContractMethod<
    [totalCollectedETH: BigNumberish, totalCollectedUF: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  receiveFunds: TypedContractMethod<[], [void], "payable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  token: TypedContractMethod<[], [string], "view">;

  totalFundsETH: TypedContractMethod<[], [bigint], "view">;

  totalFundsUF: TypedContractMethod<[], [bigint], "view">;

  totalInvestments: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unityFlow: TypedContractMethod<[], [string], "view">;

  widthdrawETH: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  widthdrawUF: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawInvestment: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addCofounder"
  ): TypedContractMethod<[cofounder: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cofounders"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "createFundraising"
  ): TypedContractMethod<
    [
      title: string,
      description: string,
      category: string,
      goalUSD: BigNumberish,
      deadline: BigNumberish,
      image: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "founder"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fullWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fundraisers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "fundraisingCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCompanyFundraisers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "invest"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "investorBalances"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "onFundraiserCompleted"
  ): TypedContractMethod<
    [totalCollectedETH: BigNumberish, totalCollectedUF: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "receiveFunds"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalFundsETH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalFundsUF"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalInvestments"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unityFlow"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "widthdrawETH"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "widthdrawUF"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawInvestment"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "CofounderAdded"
  ): TypedContractEvent<
    CofounderAddedEvent.InputTuple,
    CofounderAddedEvent.OutputTuple,
    CofounderAddedEvent.OutputObject
  >;
  getEvent(
    key: "FundraiserCompleted"
  ): TypedContractEvent<
    FundraiserCompletedEvent.InputTuple,
    FundraiserCompletedEvent.OutputTuple,
    FundraiserCompletedEvent.OutputObject
  >;
  getEvent(
    key: "FundraiserCreated"
  ): TypedContractEvent<
    FundraiserCreatedEvent.InputTuple,
    FundraiserCreatedEvent.OutputTuple,
    FundraiserCreatedEvent.OutputObject
  >;
  getEvent(
    key: "FundsReceived"
  ): TypedContractEvent<
    FundsReceivedEvent.InputTuple,
    FundsReceivedEvent.OutputTuple,
    FundsReceivedEvent.OutputObject
  >;
  getEvent(
    key: "FundsWithdrawn"
  ): TypedContractEvent<
    FundsWithdrawnEvent.InputTuple,
    FundsWithdrawnEvent.OutputTuple,
    FundsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "InvestmentReceived"
  ): TypedContractEvent<
    InvestmentReceivedEvent.InputTuple,
    InvestmentReceivedEvent.OutputTuple,
    InvestmentReceivedEvent.OutputObject
  >;
  getEvent(
    key: "InvestmentWithdrawn"
  ): TypedContractEvent<
    InvestmentWithdrawnEvent.InputTuple,
    InvestmentWithdrawnEvent.OutputTuple,
    InvestmentWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "CofounderAdded(address)": TypedContractEvent<
      CofounderAddedEvent.InputTuple,
      CofounderAddedEvent.OutputTuple,
      CofounderAddedEvent.OutputObject
    >;
    CofounderAdded: TypedContractEvent<
      CofounderAddedEvent.InputTuple,
      CofounderAddedEvent.OutputTuple,
      CofounderAddedEvent.OutputObject
    >;

    "FundraiserCompleted(address,uint256,uint256)": TypedContractEvent<
      FundraiserCompletedEvent.InputTuple,
      FundraiserCompletedEvent.OutputTuple,
      FundraiserCompletedEvent.OutputObject
    >;
    FundraiserCompleted: TypedContractEvent<
      FundraiserCompletedEvent.InputTuple,
      FundraiserCompletedEvent.OutputTuple,
      FundraiserCompletedEvent.OutputObject
    >;

    "FundraiserCreated(address)": TypedContractEvent<
      FundraiserCreatedEvent.InputTuple,
      FundraiserCreatedEvent.OutputTuple,
      FundraiserCreatedEvent.OutputObject
    >;
    FundraiserCreated: TypedContractEvent<
      FundraiserCreatedEvent.InputTuple,
      FundraiserCreatedEvent.OutputTuple,
      FundraiserCreatedEvent.OutputObject
    >;

    "FundsReceived(uint256,address)": TypedContractEvent<
      FundsReceivedEvent.InputTuple,
      FundsReceivedEvent.OutputTuple,
      FundsReceivedEvent.OutputObject
    >;
    FundsReceived: TypedContractEvent<
      FundsReceivedEvent.InputTuple,
      FundsReceivedEvent.OutputTuple,
      FundsReceivedEvent.OutputObject
    >;

    "FundsWithdrawn(uint256,address)": TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;
    FundsWithdrawn: TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;

    "InvestmentReceived(address,uint256)": TypedContractEvent<
      InvestmentReceivedEvent.InputTuple,
      InvestmentReceivedEvent.OutputTuple,
      InvestmentReceivedEvent.OutputObject
    >;
    InvestmentReceived: TypedContractEvent<
      InvestmentReceivedEvent.InputTuple,
      InvestmentReceivedEvent.OutputTuple,
      InvestmentReceivedEvent.OutputObject
    >;

    "InvestmentWithdrawn(address,uint256)": TypedContractEvent<
      InvestmentWithdrawnEvent.InputTuple,
      InvestmentWithdrawnEvent.OutputTuple,
      InvestmentWithdrawnEvent.OutputObject
    >;
    InvestmentWithdrawn: TypedContractEvent<
      InvestmentWithdrawnEvent.InputTuple,
      InvestmentWithdrawnEvent.OutputTuple,
      InvestmentWithdrawnEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
