/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface GovernanceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "executeProposal"
      | "isProposalApproved"
      | "proposalsContract"
      | "propose"
      | "rejectProposal"
      | "timelockContract"
      | "token"
      | "vote"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ProposalApproved" | "ProposalRejected"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeProposal",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isProposalApproved",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalsContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [AddressLike, BigNumberish, string, BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectProposal",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "timelockContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isProposalApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rejectProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timelockContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
}

export namespace ProposalApprovedEvent {
  export type InputTuple = [proposalId: BytesLike];
  export type OutputTuple = [proposalId: string];
  export interface OutputObject {
    proposalId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalRejectedEvent {
  export type InputTuple = [proposalId: BytesLike];
  export type OutputTuple = [proposalId: string];
  export interface OutputObject {
    proposalId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Governance extends BaseContract {
  connect(runner?: ContractRunner | null): Governance;
  waitForDeployment(): Promise<this>;

  interface: GovernanceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  executeProposal: TypedContractMethod<
    [proposalId: BytesLike],
    [void],
    "nonpayable"
  >;

  isProposalApproved: TypedContractMethod<
    [proposalId: BytesLike],
    [boolean],
    "view"
  >;

  proposalsContract: TypedContractMethod<[], [string], "view">;

  propose: TypedContractMethod<
    [
      _to: AddressLike,
      _value: BigNumberish,
      _func: string,
      _data: BytesLike,
      _description: string,
      delay: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  rejectProposal: TypedContractMethod<
    [proposalId: BytesLike],
    [void],
    "nonpayable"
  >;

  timelockContract: TypedContractMethod<[], [string], "view">;

  token: TypedContractMethod<[], [string], "view">;

  vote: TypedContractMethod<
    [proposalId: BytesLike, voteType: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "executeProposal"
  ): TypedContractMethod<[proposalId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isProposalApproved"
  ): TypedContractMethod<[proposalId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "proposalsContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "propose"
  ): TypedContractMethod<
    [
      _to: AddressLike,
      _value: BigNumberish,
      _func: string,
      _data: BytesLike,
      _description: string,
      delay: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rejectProposal"
  ): TypedContractMethod<[proposalId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "timelockContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [proposalId: BytesLike, voteType: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ProposalApproved"
  ): TypedContractEvent<
    ProposalApprovedEvent.InputTuple,
    ProposalApprovedEvent.OutputTuple,
    ProposalApprovedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalRejected"
  ): TypedContractEvent<
    ProposalRejectedEvent.InputTuple,
    ProposalRejectedEvent.OutputTuple,
    ProposalRejectedEvent.OutputObject
  >;

  filters: {
    "ProposalApproved(bytes32)": TypedContractEvent<
      ProposalApprovedEvent.InputTuple,
      ProposalApprovedEvent.OutputTuple,
      ProposalApprovedEvent.OutputObject
    >;
    ProposalApproved: TypedContractEvent<
      ProposalApprovedEvent.InputTuple,
      ProposalApprovedEvent.OutputTuple,
      ProposalApprovedEvent.OutputObject
    >;

    "ProposalRejected(bytes32)": TypedContractEvent<
      ProposalRejectedEvent.InputTuple,
      ProposalRejectedEvent.OutputTuple,
      ProposalRejectedEvent.OutputObject
    >;
    ProposalRejected: TypedContractEvent<
      ProposalRejectedEvent.InputTuple,
      ProposalRejectedEvent.OutputTuple,
      ProposalRejectedEvent.OutputObject
    >;
  };
}
