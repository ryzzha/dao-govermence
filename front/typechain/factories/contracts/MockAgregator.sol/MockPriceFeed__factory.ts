/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockPriceFeed,
  MockPriceFeedInterface,
} from "../../../contracts/MockAgregator.sol/MockPriceFeed";

const _abi = [
  {
    inputs: [
      {
        internalType: "int256",
        name: "_initialPrice",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "_price",
        type: "int256",
      },
    ],
    name: "setPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161012838038061012883398101604081905261002f91610037565b600055610050565b60006020828403121561004957600080fd5b5051919050565b60ca8061005e6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c8063f7a30806146037578063feaf968c146049575b600080fd5b60476042366004607c565b600055565b005b60008054604080518381526020810192909252428282018190526060830152608082019290925290519081900360a00190f35b600060208284031215608d57600080fd5b503591905056fea2646970667358221220f3d6e5c2e5d087f825c4dc549b765b9685e48377a14a2228b26860ca17b7948464736f6c63430008140033";

type MockPriceFeedConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockPriceFeedConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockPriceFeed__factory extends ContractFactory {
  constructor(...args: MockPriceFeedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _initialPrice: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_initialPrice, overrides || {});
  }
  override deploy(
    _initialPrice: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_initialPrice, overrides || {}) as Promise<
      MockPriceFeed & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockPriceFeed__factory {
    return super.connect(runner) as MockPriceFeed__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockPriceFeedInterface {
    return new Interface(_abi) as MockPriceFeedInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockPriceFeed {
    return new Contract(address, _abi, runner) as unknown as MockPriceFeed;
  }
}
