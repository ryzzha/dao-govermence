/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { Timelock, TimelockInterface } from "../../contracts/Timelock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_governance",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "proposalId",
        type: "bytes32",
      },
    ],
    name: "ProposalExecuted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "proposalId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "startTime",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "endTime",
        type: "uint256",
      },
    ],
    name: "ProposalQueued",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "proposalId",
        type: "bytes32",
      },
    ],
    name: "ProposalRejected",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "proposalId",
        type: "bytes32",
      },
    ],
    name: "executeProposal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "governance",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "proposalId",
        type: "bytes32",
      },
    ],
    name: "isVotingOpen",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "proposalId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "delay",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "duration",
        type: "uint256",
      },
    ],
    name: "queueProposal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "queuedProposals",
    outputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "startTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "endTime",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "executed",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "rejected",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516112ee3803806112ee833981810160405281019061003291906100db565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b6100b88161009d565b81146100c357600080fd5b50565b6000815190506100d5816100af565b92915050565b6000602082840312156100f1576100f0610078565b5b60006100ff848285016100c6565b91505092915050565b6111d7806101176000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631e240e331461005c57806322ec0b35146100925780635aa6e675146100ae5780636d560a8d146100cc578063980ff6c6146100fc575b600080fd5b610076600480360381019061007191906107ec565b610118565b604051610089979695949392919061091e565b60405180910390f35b6100ac60048036038101906100a79190610a51565b61021c565b005b6100b661047e565b6040516100c39190610b00565b60405180910390f35b6100e660048036038101906100e191906107ec565b6104a2565b6040516100f39190610b1b565b60405180910390f35b610116600480360381019061011191906107ec565b6104f4565b005b60016020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101549080600201805461016790610b65565b80601f016020809104026020016040519081016040528092919081815260200182805461019390610b65565b80156101e05780601f106101b5576101008083540402835291602001916101e0565b820191906000526020600020905b8154815290600101906020018083116101c357829003601f168201915b5050505050908060030154908060040154908060050160009054906101000a900460ff16908060050160019054906101000a900460ff16905087565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a190610bf3565b60405180910390fd5b600082426102b89190610c42565b905060008284426102c99190610c42565b6102d39190610c42565b90506040518060e001604052808973ffffffffffffffffffffffffffffffffffffffff16815260200188815260200187878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200183815260200182815260200160001515815260200160001515815250600160008b815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020190816103e19190610e51565b50606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690831515021790555060c08201518160050160016101000a81548160ff021916908315150217905550905050887fa41177828e45756af65c61fece09dddf5390f789cfd1c43577aec3b6b390534f838360405161046b929190610f23565b60405180910390a2505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600160008481526020019081526020016000209050806003015442101580156104d15750806004015442105b80156104ec57508060050160019054906101000a900460ff16155b915050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610582576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057990610bf3565b60405180910390fd5b600060016000838152602001908152602001600020905080600401544210156105e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d790610f98565b60405180910390fd5b8060050160019054906101000a900460ff1615610632576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062990611004565b60405180910390fd5b8060050160009054906101000a900460ff1615610684576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067b90611070565b60405180910390fd5b60008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260010154836002016040516106d7919061111e565b60006040518083038185875af1925050503d8060008114610714576040519150601f19603f3d011682016040523d82523d6000602084013e610719565b606091505b505090508061075d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075490611181565b60405180910390fd5b60018260050160006101000a81548160ff021916908315150217905550827f7b1bcf1ccf901a11589afff5504d59fd0a53780eed2a952adade0348985139e060405160405180910390a2505050565b600080fd5b600080fd5b6000819050919050565b6107c9816107b6565b81146107d457600080fd5b50565b6000813590506107e6816107c0565b92915050565b600060208284031215610802576108016107ac565b5b6000610810848285016107d7565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061084482610819565b9050919050565b61085481610839565b82525050565b6000819050919050565b61086d8161085a565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156108ad578082015181840152602081019050610892565b60008484015250505050565b6000601f19601f8301169050919050565b60006108d582610873565b6108df818561087e565b93506108ef81856020860161088f565b6108f8816108b9565b840191505092915050565b60008115159050919050565b61091881610903565b82525050565b600060e082019050610933600083018a61084b565b6109406020830189610864565b818103604083015261095281886108ca565b90506109616060830187610864565b61096e6080830186610864565b61097b60a083018561090f565b61098860c083018461090f565b98975050505050505050565b61099d81610839565b81146109a857600080fd5b50565b6000813590506109ba81610994565b92915050565b6109c98161085a565b81146109d457600080fd5b50565b6000813590506109e6816109c0565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610a1157610a106109ec565b5b8235905067ffffffffffffffff811115610a2e57610a2d6109f1565b5b602083019150836001820283011115610a4a57610a496109f6565b5b9250929050565b600080600080600080600060c0888a031215610a7057610a6f6107ac565b5b6000610a7e8a828b016107d7565b9750506020610a8f8a828b016109ab565b9650506040610aa08a828b016109d7565b955050606088013567ffffffffffffffff811115610ac157610ac06107b1565b5b610acd8a828b016109fb565b94509450506080610ae08a828b016109d7565b92505060a0610af18a828b016109d7565b91505092959891949750929550565b6000602082019050610b15600083018461084b565b92915050565b6000602082019050610b30600083018461090f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610b7d57607f821691505b602082108103610b9057610b8f610b36565b5b50919050565b600082825260208201905092915050565b7f4f6e6c7920476f7665726e616e63652063616e20657865637574650000000000600082015250565b6000610bdd601b83610b96565b9150610be882610ba7565b602082019050919050565b60006020820190508181036000830152610c0c81610bd0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c4d8261085a565b9150610c588361085a565b9250828201905080821115610c7057610c6f610c13565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610d077fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610cca565b610d118683610cca565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610d4e610d49610d448461085a565b610d29565b61085a565b9050919050565b6000819050919050565b610d6883610d33565b610d7c610d7482610d55565b848454610cd7565b825550505050565b600090565b610d91610d84565b610d9c818484610d5f565b505050565b5b81811015610dc057610db5600082610d89565b600181019050610da2565b5050565b601f821115610e0557610dd681610ca5565b610ddf84610cba565b81016020851015610dee578190505b610e02610dfa85610cba565b830182610da1565b50505b505050565b600082821c905092915050565b6000610e2860001984600802610e0a565b1980831691505092915050565b6000610e418383610e17565b9150826002028217905092915050565b610e5a82610873565b67ffffffffffffffff811115610e7357610e72610c76565b5b610e7d8254610b65565b610e88828285610dc4565b600060209050601f831160018114610ebb5760008415610ea9578287015190505b610eb38582610e35565b865550610f1b565b601f198416610ec986610ca5565b60005b82811015610ef157848901518255600182019150602085019450602081019050610ecc565b86831015610f0e5784890151610f0a601f891682610e17565b8355505b6001600288020188555050505b505050505050565b6000604082019050610f386000830185610864565b610f456020830184610864565b9392505050565b7f44656c6179206e6f742070617373656400000000000000000000000000000000600082015250565b6000610f82601083610b96565b9150610f8d82610f4c565b602082019050919050565b60006020820190508181036000830152610fb181610f75565b9050919050565b7f50726f706f73616c2072656a6563746564000000000000000000000000000000600082015250565b6000610fee601183610b96565b9150610ff982610fb8565b602082019050919050565b6000602082019050818103600083015261101d81610fe1565b9050919050565b7f50726f706f73616c20616c726561647920657865637574656400000000000000600082015250565b600061105a601983610b96565b915061106582611024565b602082019050919050565b600060208201905081810360008301526110898161104d565b9050919050565b600081905092915050565b600081546110a881610b65565b6110b28186611090565b945060018216600081146110cd57600181146110e257611115565b60ff1983168652811515820286019350611115565b6110eb85610ca5565b60005b8381101561110d578154818901526001820191506020810190506110ee565b838801955050505b50505092915050565b600061112a828461109b565b915081905092915050565b7f457865637574696f6e206661696c656400000000000000000000000000000000600082015250565b600061116b601083610b96565b915061117682611135565b602082019050919050565b6000602082019050818103600083015261119a8161115e565b905091905056fea2646970667358221220b862bfc0cf137e816debecbdf8b948b3440ddcb01fad2f1d098dbd0563f2648e64736f6c634300081c0033";

type TimelockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TimelockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Timelock__factory extends ContractFactory {
  constructor(...args: TimelockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _governance: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_governance, overrides || {});
  }
  override deploy(
    _governance: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_governance, overrides || {}) as Promise<
      Timelock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Timelock__factory {
    return super.connect(runner) as Timelock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TimelockInterface {
    return new Interface(_abi) as TimelockInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Timelock {
    return new Contract(address, _abi, runner) as unknown as Timelock;
  }
}
