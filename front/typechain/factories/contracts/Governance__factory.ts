/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  Governance,
  GovernanceInterface,
} from "../../contracts/Governance";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "proposalId",
        type: "bytes32",
      },
    ],
    name: "ProposalApproved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "proposalId",
        type: "bytes32",
      },
    ],
    name: "ProposalRejected",
    type: "event",
  },
  {
    inputs: [],
    name: "admin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "proposalId",
        type: "bytes32",
      },
    ],
    name: "executeProposal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "proposalId",
        type: "bytes32",
      },
    ],
    name: "isProposalApproved",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proposalsContract",
    outputs: [
      {
        internalType: "contract IProposals",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_func",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
      {
        internalType: "string",
        name: "_description",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "delay",
        type: "uint256",
      },
    ],
    name: "propose",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "proposalId",
        type: "bytes32",
      },
    ],
    name: "rejectProposal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "timelockContract",
    outputs: [
      {
        internalType: "contract ITimelock",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "proposalId",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "voteType",
        type: "uint8",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b5033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611071806100606000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063a9181cc411610066578063a9181cc41461011e578063c299767c1461013c578063c9a28cb91461016c578063f851a44014610188578063fc0c546a146101a657610093565b806311ab31ed14610098578063441347fa146100b45780634450c203146100e4578063980ff6c614610102575b600080fd5b6100b260048036038101906100ad919061084a565b6101c4565b005b6100ce60048036038101906100c991906109c6565b610284565b6040516100db9190610ac4565b60405180910390f35b6100ec6104b0565b6040516100f99190610b3e565b60405180910390f35b61011c6004803603810190610117919061084a565b6104d4565b005b610126610567565b6040516101339190610b7a565b60405180910390f35b6101566004803603810190610151919061084a565b61058d565b6040516101639190610bb0565b60405180910390f35b61018660048036038101906101819190610c04565b610594565b005b610190610779565b60405161019d9190610c53565b60405180910390f35b6101ae61079f565b6040516101bb9190610c8f565b60405180910390f35b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610254576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024b90610d07565b60405180910390fd5b807f55295d4ce992922fa2e5ffbf3a3dcdb367de0a15e125ace083456017fd22060f60405160405180910390a250565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016102e29190610c53565b602060405180830381865afa1580156102ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103239190610d3c565b11610363576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035a90610db5565b60405180910390fd5b60006103758b8b8b8b8b8b8b8b6107c5565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166335facf7886868d6040518463ffffffff1660e01b81526004016103d493929190610e31565b600060405180830381600087803b1580156103ee57600080fd5b505af1158015610402573d6000803e3d6000fd5b50505050606060008a8a90501115610456578989604051610424929190610e93565b6040518091039020888860405160200161044093929190610ef9565b604051602081830303815290604052905061049e565b87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505090505b81925050509998505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610564576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055b90610d07565b60405180910390fd5b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016105f19190610c53565b602060405180830381865afa15801561060e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106329190610d3c565b11610672576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066990610db5565b60405180910390fd5b60018160ff161480610687575060028160ff16145b80610695575060038160ff16145b6106d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cb90610f6f565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016107319190610c53565b602060405180830381865afa15801561074e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107729190610d3c565b9050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600088888888888888886040516020016107e6989796959493929190610fcd565b60405160208183030381529060405280519060200120905098975050505050505050565b600080fd5b600080fd5b6000819050919050565b61082781610814565b811461083257600080fd5b50565b6000813590506108448161081e565b92915050565b6000602082840312156108605761085f61080a565b5b600061086e84828501610835565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108a282610877565b9050919050565b6108b281610897565b81146108bd57600080fd5b50565b6000813590506108cf816108a9565b92915050565b6000819050919050565b6108e8816108d5565b81146108f357600080fd5b50565b600081359050610905816108df565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126109305761092f61090b565b5b8235905067ffffffffffffffff81111561094d5761094c610910565b5b60208301915083600182028301111561096957610968610915565b5b9250929050565b60008083601f8401126109865761098561090b565b5b8235905067ffffffffffffffff8111156109a3576109a2610910565b5b6020830191508360018202830111156109bf576109be610915565b5b9250929050565b600080600080600080600080600060c08a8c0312156109e8576109e761080a565b5b60006109f68c828d016108c0565b9950506020610a078c828d016108f6565b98505060408a013567ffffffffffffffff811115610a2857610a2761080f565b5b610a348c828d0161091a565b975097505060608a013567ffffffffffffffff811115610a5757610a5661080f565b5b610a638c828d01610970565b955095505060808a013567ffffffffffffffff811115610a8657610a8561080f565b5b610a928c828d0161091a565b935093505060a0610aa58c828d016108f6565b9150509295985092959850929598565b610abe81610814565b82525050565b6000602082019050610ad96000830184610ab5565b92915050565b6000819050919050565b6000610b04610aff610afa84610877565b610adf565b610877565b9050919050565b6000610b1682610ae9565b9050919050565b6000610b2882610b0b565b9050919050565b610b3881610b1d565b82525050565b6000602082019050610b536000830184610b2f565b92915050565b6000610b6482610b0b565b9050919050565b610b7481610b59565b82525050565b6000602082019050610b8f6000830184610b6b565b92915050565b60008115159050919050565b610baa81610b95565b82525050565b6000602082019050610bc56000830184610ba1565b92915050565b600060ff82169050919050565b610be181610bcb565b8114610bec57600080fd5b50565b600081359050610bfe81610bd8565b92915050565b60008060408385031215610c1b57610c1a61080a565b5b6000610c2985828601610835565b9250506020610c3a85828601610bef565b9150509250929050565b610c4d81610897565b82525050565b6000602082019050610c686000830184610c44565b92915050565b6000610c7982610b0b565b9050919050565b610c8981610c6e565b82525050565b6000602082019050610ca46000830184610c80565b92915050565b600082825260208201905092915050565b7f4e6f7420617574686f72697a6564000000000000000000000000000000000000600082015250565b6000610cf1600e83610caa565b9150610cfc82610cbb565b602082019050919050565b60006020820190508181036000830152610d2081610ce4565b9050919050565b600081519050610d36816108df565b92915050565b600060208284031215610d5257610d5161080a565b5b6000610d6084828501610d27565b91505092915050565b7f6e6f7420656e6f75676820746f6b656e73000000000000000000000000000000600082015250565b6000610d9f601183610caa565b9150610daa82610d69565b602082019050919050565b60006020820190508181036000830152610dce81610d92565b9050919050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610e018385610caa565b9350610e0e838584610dd5565b610e1783610de4565b840190509392505050565b610e2b816108d5565b82525050565b60006040820190508181036000830152610e4c818587610df5565b9050610e5b6020830184610e22565b949350505050565b600081905092915050565b6000610e7a8385610e63565b9350610e87838584610dd5565b82840190509392505050565b6000610ea0828486610e6e565b91508190509392505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b610ef3610eee82610eac565b610ed8565b82525050565b6000610f058286610ee2565b600482019150610f16828486610e6e565b9150819050949350505050565b7f496e76616c696420766f74652074797065000000000000000000000000000000600082015250565b6000610f59601183610caa565b9150610f6482610f23565b602082019050919050565b60006020820190508181036000830152610f8881610f4c565b9050919050565b600082825260208201905092915050565b6000610fac8385610f8f565b9350610fb9838584610dd5565b610fc283610de4565b840190509392505050565b600060a082019050610fe2600083018b610c44565b610fef602083018a610e22565b818103604083015261100281888a610df5565b90508181036060830152611017818688610fa0565b9050818103608083015261102c818486610df5565b9050999850505050505050505056fea2646970667358221220ef298adcb235c1ea8ea6da0201a783c08fe381cad0339445525ae196dcde5c0a64736f6c634300081c0033";

type GovernanceConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GovernanceConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Governance__factory extends ContractFactory {
  constructor(...args: GovernanceConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Governance & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Governance__factory {
    return super.connect(runner) as Governance__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GovernanceInterface {
    return new Interface(_abi) as GovernanceInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Governance {
    return new Contract(address, _abi, runner) as unknown as Governance;
  }
}
